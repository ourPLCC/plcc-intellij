{
  parserClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="PLCC"
  psiImplClassSuffix="Impl"
  psiPackage="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model"
  psiImplPackage="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.impl"

  elementTypeHolderClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCTypes"
  elementTypeClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCElementType"
  tokenTypeClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCTokenType"

  psiImplUtilClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.impl.PLCCPsiImplUtil"
}

// For some reason, the parser model returning one space compared to multiple spaces does not work? this is why
// I am currently using SPACES and EOLS. Mabye this is fixed now that I removed TokenType.WHITE_SPACE

// Make sure you remember that this does not operate on longest match first, it is whichever rule is first.

simpleFile ::= regexDefs (separator grammarRules)? (separator javaInclude)?

fillerLines ::= (COMMENT | EOL)+
separator ::= SECTION_SEPERATOR EOL

// token type section
regexDefs ::= fillerLines? (regexDef EOL fillerLines?)+
regexDef ::= SPACE* (tokenDef | skipDef) SPACE* COMMENT?
tokenDef ::= (TOKEN? SPACE+)? TOKEN_TYPE_NAME SPACE+ REGEX
skipDef ::= SKIP SPACE+ TOKEN_TYPE_NAME SPACE+ REGEX
//

// grammar rules section
grammarRules ::= fillerLines? (grammarRule EOL fillerLines?)+
grammarRule ::= SPACE* lhs SPACE+ (singleMatch | multiMatch) SPACE*
singleMatch ::= SINGLE_MATCH_RULE (rhs)?
multiMatch ::= ANY_MATCH_RULE (rhs (SPACE+ anyMatchSeperator)?)
lhs ::= abstractGrammarDef | concreteGrammarDef
rhs ::= (SPACE* (namedGrammarUsage | unnamedGrammarUsage | namedCapturedTokenType | unnamedCapturedTokenType | uncapturedTokenType))+
anyMatchSeperator ::= PLUS TOKEN_TYPE_NAME

concreteGrammarDef ::= LEFT_ANGLE_BRACKET GRAMMAR_DEF_NAME RIGHT_ANGLE_BRACKET
abstractGrammarDef ::= concreteGrammarDef COLON INSTANTIATED_NAME

unnamedGrammarUsage ::= LEFT_ANGLE_BRACKET GRAMMAR_USAGE_NAME RIGHT_ANGLE_BRACKET
namedGrammarUsage ::= unnamedGrammarUsage GRAMMAR_USAGE_NAME
unnamedCapturedTokenType ::= LEFT_ANGLE_BRACKET TOKEN_TYPE_NAME RIGHT_ANGLE_BRACKET
namedCapturedTokenType ::= unnamedCapturedTokenType GRAMMAR_USAGE_NAME
uncapturedTokenType ::= TOKEN_TYPE_NAME
//

javaInclude ::= fillerLines? ((includeStatement EOL fillerLines?)* (includeStatement fillerLines?))?
includeStatement ::= SPACE* INCLUDE SPACE+ FILE_NAME SPACE*

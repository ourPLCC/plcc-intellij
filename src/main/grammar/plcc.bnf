{
  parserClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="PLCC"
  psiImplClassSuffix="Impl"
  psiPackage="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model"
  psiImplPackage="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.impl"

  elementTypeHolderClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCTypes"
  elementTypeClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCElementType"
  tokenTypeClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.PLCCTokenType"

  psiImplUtilClass="edu.rit.cs.plcc.jetbrainsPlugin.lang.parser_model.impl.PLCCPsiImplUtil"
}

// For some reason, the parser model returning one space compared to multiple spaces does not work? this is why
// I am currently using SPACES and EOLS. Mabye this is fixed now that I removed TokenType.WHITE_SPACE

// Make sure you remember that this does not operate on longest match first, it is whichever rule is first.

simpleFile ::= regexDefs (SECTION_SEPERATOR grammarRules)? (SECTION_SEPERATOR javaInclude)?

// token type section
regexDefs ::= EOLS? (regexDef EOLS)+
regexDef ::= SPACES? (tokenDef | skipDef) SPACES?
tokenDef ::= (TOKEN? SPACES+)? IDENTIFIER SPACES+ REGEX
skipDef ::= SKIP SPACES+ IDENTIFIER SPACES+ REGEX
//

// grammar rules section
grammarRules ::= EOLS? (grammarRule EOLS)+
grammarRule ::= SPACES? (singleMatch | multiMatch) SPACES?
singleMatch ::= lhs SPACES+ SINGLE_MATCH_RULE (rhs)?
multiMatch ::= lhs SPACES+ ANY_MATCH_RULE (rhs SPACES+ ANY_MATCH_SEPERATOR?)?
lhs ::= GRAMMAR_NAME | GRAMMAR_NAME_ABSTRACT
rhs ::= (SPACES+ (IDENTIFIER | namedRule | GRAMMAR_NAME))+
namedRule ::= GRAMMAR_NAME IDENTIFIER
//

javaInclude ::= COMMENT+
